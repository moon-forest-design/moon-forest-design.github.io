{"version":3,"file":"component---src-templates-tag-template-js-466772456680edbf447a.js","mappings":"qLA0DA,UAnDgB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACtBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,OAA3BC,EAAR,EAAQA,MACFC,EAAS,MAASH,EAAT,WADf,EAAeI,WACA,KACf,OACE,gBAAC,IAAD,CAAQC,SAAS,OAAOC,UAAWH,GACjC,gBAAC,IAAD,CACEG,UAAS,MAAQN,EAAR,aACTO,gBAAe,MAAQP,EAAR,eAEjB,sBAAIQ,UAAWC,EAAAA,UACZP,EAAMQ,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNC,EAAOD,EAAKC,KACVC,EAAUF,EAAKG,YAAfD,MACR,OACE,sBAAIE,IAAKH,EAAMJ,UAAWC,EAAAA,gBACxB,gBAAC,KAAD,CAAMO,GAAE,SAAWJ,EAAQJ,UAAWC,EAAAA,gBACnCI,QAMX,uBAAKL,UAAWC,EAAAA,UACd,gBAAC,KAAD,CAAMO,GAAG,aAAT","sources":["webpack://moon-forest-labo/./src/templates/tagTemplate.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link, graphql } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\nimport * as style from '../styles/style.module.css';\r\n\r\nconst TagList = ({ pageContext, data }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMdx;\r\n  const tagHeader = `タグ「${tag}」が付いた記事（${totalCount}件）`;\r\n  return (\r\n    <Layout pageType=\"blog\" pageTitle={tagHeader}>\r\n      <Seo\r\n        pageTitle={`タグ「${tag}」が付いた記事リスト`}\r\n        pageDescription={`タグ「${tag}」が付いた記事リスト`}\r\n      />\r\n      <ul className={style.blogList}>\r\n        {edges.map(({ node }) => {\r\n          const slug = node.slug;\r\n          const { title } = node.frontmatter;\r\n          return (\r\n            <li key={slug} className={style.blogList__item}>\r\n              <Link to={`/memo/${slug}`} className={style.blogList__link}>\r\n                {title}\r\n              </Link>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n      <div className={style.pageBack}>\r\n        <Link to=\"/tag-list\">タグリストに戻る</Link>\r\n      </div>\r\n    </Layout>\r\n  )\r\n};\r\n\r\nTagList.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            slug: PropTypes.string.isRequired,\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default TagList;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMdx(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          slug\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["pageContext","data","tag","allMdx","edges","tagHeader","totalCount","pageType","pageTitle","pageDescription","className","style","map","node","slug","title","frontmatter","key","to"],"sourceRoot":""}